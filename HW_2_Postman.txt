HW_2_Postman.
===========================
EP_1
http://162.55.220.72:5005/first
1. Отправить запрос:
2. Статус код 200
3. Проверить, что в body приходит правильный string.
Method: GET
Tests:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Body is correct", function () {
    pm.response.to.have.body("This is the first responce from server!");
});
response:
Body:
This is the first responce from server!
Test Results:
PASS Status code is 200
PASS Body is correct
================================
EP_2
http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Проверить, что name в ответе равно name s request (name вбить руками.)
5. Проверить, что age в ответе равно age s request (age вбить руками.)
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
7. Спарсить request.
8. Проверить, что name в ответе равно name s request (name забрать из request.)
9. Проверить, что age в ответе равно age s request (age забрать из request.)
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
11. Вывести в консоль параметр family из response.
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
Method: POST
Tests:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
let jsonData = pm.response.json();
let user_name = jsonData.name
pm.test("Your test name", function () {
    pm.expect(user_name).to.eql("Ivan");
});
let user_age = jsonData.age
pm.test("Your test age", function () {
    pm.expect(user_age).to.eql("39");
});
let user_salary = jsonData.salary
pm.test("Your test salary", function () {
    pm.expect(user_salary).to.eql(490000);
});
let req = request.data
pm.test("Name is body", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});
pm.test("Age is body", function () {
    pm.expect(jsonData.age).to.eql(req.age);
});
pm.test("Salary is body", function () {
    pm.expect(jsonData.salary).to.eql(+req.salary);
});
console.log(jsonData.family)
pm.test("u_salary_1_5_year", function () {
    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4);
});
console.log(jsonData.family.u_salary_1_5_year);
console.log(jsonData.salary*4);
response:
Body:
{
    "age": "39",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "u_salary_1_5_year": 1960000
    },
    "name": "Ivan",
    "salary": 490000
}
Test Results:
PASS Status code is 200
PASS Your test name
PASS Your test age
PASS Your test salary
PASS Name is body
PASS Age is body
PASS Salary is body
PASS u_salary_1_5_year
Console:
POST http://162.55.220.72:5005//user_info_3
{children: [2], u_salary_1_5_year: 1960000}
1960000
1960000
========================================
EP_3
http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age s request (age забрать из request.)
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
8. Вывести в консоль параметр family из response.
9. Проверить, что у параметра dog есть параметры name.
10. Проверить, что у параметра dog есть параметры age.
11. Проверить, что параметр name имеет значение Luky.
12. Проверить, что параметр age имеет значение 4.

Method: GET
Tests:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
let jsonData = pm.response.json();
let req = pm.request.url.query.toObject()
pm.test("Name is url", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});
pm.test("Age is url", function () {
    pm.expect(jsonData.age).to.eql(req.age);
});
pm.test("Salary is url", function () {
    pm.expect(jsonData.salary).to.eql(+req.salary);
});
console.log(jsonData.family);
pm.test("Проверить, что у параметра dog есть параметры name", () => {
    pm.expect(jsonData.family.pets.dog).to.have.property("name");
});
pm.test("Проверить, что у параметра dog есть параметры age", () => {
    pm.expect(jsonData.family.pets.dog).to.have.property("age");
});
pm.test("Проверить, что параметр name имеет значение Luky.", () => {
    pm.expect(jsonData.family.pets.dog.name).to.be.oneOf(["Luky"]);
});
pm.test("Проверить, что параметр age имеет значение 4.", () => {
    pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4]);
});
Body:
{
    "age": "39",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "pets": {
            "cat": {
                "age": 3,
                "name": "Sunny"
            },
            "dog": {
                "age": 4,
                "name": "Luky"
            }
        },
        "u_salary_1_5_year": 1960000
    },
    "name": "Ivan",
    "salary": 490000
}
Test Results:
PASS Status code is 200
PASS Name is url
PASS Age is url
PASS Salary is url
PASS Проверить, что у параметра dog есть параметры name
PASS Проверить, что у параметра dog есть параметры age
PASS Проверить, что параметр name имеет значение Luky.
PASS Проверить, что параметр age имеет значение 4.
Console:
GET http://162.55.220.72:5005 /object_info_3?name=Ivan&age=39&salary=490000
{children: [2], pets: {…}, u_salary_1_5_year: 1960000}
========================================================================
EP_4
http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age из request (age забрать из request.)
7. Вывести в консоль параметр salary из request.
8. Вывести в консоль параметр salary из response.
9. Вывести в консоль 0-й элемент параметра salary из response.
10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
Method: GET
Tests:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
let jsonData = pm.response.json();
let req = pm.request.url.query.toObject()
pm.test("Name is url", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});
pm.test("Age is url", function () {
    pm.expect(jsonData.age).to.eql(+req.age);
});
console.log("Вывести в консоль параметр salary из request.", jsonData.salary);
console.log("Вывести в консоль параметр salary из response.", req.salary);
let salary_0 = jsonData.salary[0];
console.log(salary_0);
let salary_1 = jsonData.salary[1];
console.log(salary_1);
let salary_2 = jsonData.salary[2];
console.log(salary_2);
pm.test("Salary_0", function () {
    pm.expect(salary_0).to.eql(+req.salary);
});
pm.test("Salary_1", function () {
    pm.expect(+salary_1).to.eql(+req.salary*2);
});
pm.test("Salary_2", function () {
    pm.expect(+salary_2).to.eql(+req.salary*3);
});
pm.environment.set("name", jsonData.name);
pm.environment.set("age", jsonData.age);
pm.environment.set("salary", jsonData.salary[0]);
for (i = 0; i < jsonData.salary.length; i++){
    console.log("salary_cycle", jsonData.salary[i]);
    };
Body:
{
    "age": 39,
    "name": "Ivan",
    "salary": [
        490000,
        "980000",
        "1470000"
    ]
}
Test Results:
PASS Status code is 200
PASS Name is url
PASS Age is url
PASS Salary_0
PASS Salary_1
PASS Salary_2
Console:
GET http://162.55.220.72:5005 /object_info_4?name=Ivan&age=39&salary=490000
Вывести в консоль параметр salary из request.
(3) [490000, "980000", "1470000"]
Вывести в консоль параметр salary из response.
490000
490000
980000
1470000
salary_cycle
490000
salary_cycle
980000
salary_cycle
1470000
=======================================================================
EP_5
http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
7. Спарсить request.
8. Проверить, что json response имеет параметр start_qa_salary
9. Проверить, что json response имеет параметр qa_salary_after_6_months
10. Проверить, что json response имеет параметр qa_salary_after_12_months
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
13. Проверить, что json response имеет параметр person
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
Method: POST
Tests:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
let jsonData = pm.response.json();
let req = request.data;
pm.test("json response имеет параметр start_qa_salary", () => {
    pm.expect(jsonData).to.have.property("start_qa_salary");
});
pm.test("json response имеет параметр qa_salary_after_6_months", () => {
    pm.expect(jsonData).to.have.property("qa_salary_after_6_months");
});
pm.test("json response имеет параметр qa_salary_after_12_months", () => {
    pm.expect(jsonData).to.have.property("qa_salary_after_12_months");
});
pm.test("json response имеет параметр qa_salary_after_1.5_year", () => {
    pm.expect(jsonData).to.have.property("qa_salary_after_1.5_year");
});
pm.test("json response имеет параметр qa_salary_after_3.5_years", () => {
    pm.expect(jsonData).to.have.property("qa_salary_after_3.5_years");
});
pm.test("json response имеет параметр person", () => {
    pm.expect(jsonData).to.have.property("person");
});
pm.test("параметр start_qa_salary равен salary из request", function() {
    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);
});
pm.test("параметр qa_salary_after_6_months равен salary*2 из request", function() {
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary*2);
});
pm.test("параметр qa_salary_after_12_months равен salary*2.7 из request", function(){
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary*2.7);
});

pm.test("параметр qa_salary_after_1.5_year равен salary*3.3 из request", function() {
    pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql(+req.salary*3.3);
});
pm.test("параметр qa_salary_after_3.5_years равен salary*3.8 из request", function() {
    pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(+req.salary*3.8);
});
pm.test("в параметре person, 1-й элемент из u_name равен salary из request", function() {
    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);
});
pm.test("параметр u_age равен age из request", function() {
    pm.expect(jsonData.person.u_age).to.eql(+req.age);
});
pm.test("параметр u_salary_5_years равен salary*4.2 из request", function() {
    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2);
});
for (let i in jsonData.person){
    console.log("Property:", i, "property value:", jsonData.person[i]);
}
for (let i in jsonData.person){
    console.log(i, jsonData.person[i]);
}
Body:
{
    "person": {
        "u_age": 39,
        "u_name": [
            "Ivan",
            490000,
            39
        ],
        "u_salary_5_years": 2058000.0
    },
    "qa_salary_after_1.5_year": 1617000.0,
    "qa_salary_after_12_months": 1323000.0,
    "qa_salary_after_3.5_years": 1862000.0,
    "qa_salary_after_6_months": 980000,
    "start_qa_salary": 490000
}
Test Results:
PASS Status code is 200
PASS json response имеет параметр start_qa_salary
PASS json response имеет параметр qa_salary_after_6_months
PASS json response имеет параметр qa_salary_after_12_months
PASS json response имеет параметр qa_salary_after_1.5_year
PASS json response имеет параметр qa_salary_after_3.5_years
PASS json response имеет параметр person
PASS параметр start_qa_salary равен salary из request
PASS параметр qa_salary_after_6_months равен salary*2 из request
PASS параметр qa_salary_after_12_months равен salary*2.7 из request
PASS параметр qa_salary_after_1.5_year равен salary*3.3 из request
PASS параметр qa_salary_after_3.5_years равен salary*3.8 из request
PASS в параметре person, 1-й элемент из u_name равен salary из request
PASS параметр u_age равен age из request
PASS параметр u_salary_5_years равен salary*4.2 из request
Console:
POST http://162.55.220.72:5005/user_info_2
"Property:" "u_age" "property value:" 39
"Property:" "u_name" "property value:" >(3) ["Ivan", 490000, 39]
"Property:" "u_salary_5_years" "property value:" 2058000
==============================================================END======================================================
















































